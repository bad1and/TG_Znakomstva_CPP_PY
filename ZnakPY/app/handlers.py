import os
from io import BytesIO

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, BufferedInputFile, CallbackQuery
from sqlalchemy import select, func

import app.database.requests as rq
import app.keyboards as kb
from app.database.models import async_session, UserInfo, RegistrationState
from app.questions import questions, questions_wanted
from app.matching import find_matching_users, show_partner_profile

router = Router()


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    async with async_session() as session:
        if message.from_user.id == int(os.getenv('ADMIN_ID')):
            await message.answer("–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω!", reply_markup=kb.admin_menu)
        else:
            user = await session.scalar(select(UserInfo).where(UserInfo.tg_id == message.from_user.id))

            if not user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                await message.answer(
                    "–í—ã —É –Ω–∞—Å –ø–µ—Ä–≤—ã–π —Ä–∞–∑! –ù–∞–∂–º–∏—Ç–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üöÄ' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç.",
                    reply_markup=kb.reg_keyboard
                )
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb.menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message(F.contact)
async def handle_contact(message: Message):
    tg_id = message.from_user.id
    username = message.from_user.username or "None"
    first_name = message.from_user.first_name or "None"
    last_name = message.from_user.last_name or "None"
    number = message.contact.phone_number

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await rq.unic_data_user(
        tg_id=tg_id,
        username=username,
        first_name=first_name,
        last_name=last_name,
        number=number,
        sex=None,
        in_bot_name=None,
        years=None,
        unic_your_id=None,
        unic_wanted_id=None,
        status=1
    )

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \n–ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –æ–ø—Ä–æ—Å! –ò—Å–ø—É–≥–∞–ª—Å—è? –ù–µ –±–æ–π—Å—è! –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –µ–≥–æ.",
        reply_markup=kb.opros_keyboard)


# –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
@router.message(F.text == '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å ü§ô')
async def start_survey(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=None)
    await state.set_state(RegistrationState.waiting_for_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(RegistrationState.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª", reply_markup=kb.sex)
    await state.set_state(RegistrationState.waiting_for_sex)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(RegistrationState.waiting_for_sex)
async def process_sex(message: Message, state: FSMContext):
    sex = message.text
    try:
        if sex == "–ú—É–∂—Å–∫–æ–π üôã‚Äç‚ôÇÔ∏è":
            sex = "men"
        elif sex == "–ñ–µ–Ω—Å–∫–∏–π üôã‚Äç‚ôÄÔ∏è":
            sex = "woman"
        else:
            await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞", reply_markup=None)
            return
    except ValueError:
        # await message.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞", reply_markup=None)
        return
    await state.update_data(sex=sex)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=None)
    await state.set_state(RegistrationState.waiting_for_age)


@router.message(RegistrationState.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        if 16 <= int(message.text) <= 40:
            age = int(message.text)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.", reply_markup=None)
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞.", reply_markup=None)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    name = user_data.get("name")
    sex = user_data.get("sex")

    await rq.unic_data_user(
        tg_id=message.from_user.id,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        in_bot_name=name,
        years=age,
        sex=sex,
        unic_your_id=0,
        unic_wanted_id=0,
        username=None,
        first_name=None,
        last_name=None,
        number=None,
        status=1
    )

    await message.answer("–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –æ —Ç–µ–±–µ –∏ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ –ø–∞—Ä—Ç–Ω–µ—Ä–µ!",
                         reply_markup=kb.start_opros)
    await state.clear()


@router.message(F.text.in_(['–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–∏–∫ üëª', '–ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å üîÑ']))
async def start_survey(message: Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ä–æ—Å"""
    await state.update_data(your_answers=[])
    await state.update_data(wanted_answers=[])
    await ask_question(message, state, 1)


async def ask_question(message: Message, state: FSMContext, question_id: int):
    """–ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if question_id in questions:
        await message.answer(questions[question_id]["question"], reply_markup=kb.get_question_keyboard(question_id))
    else:
        await ask_wanted_question(message, state, 1, message.from_user.id)


async def ask_wanted_question(message: Message, state: FSMContext, question_id: int, user_id: int):
    if question_id in questions_wanted:
        await message.answer(questions_wanted[question_id]["question"],
                             reply_markup=kb.get_wanted_question_keyboard(question_id))
    else:
        data = await state.get_data()
        unic_your_id = ";".join(data.get("your_answers", []))
        unic_wanted_id = ";".join(data.get("wanted_answers", []))

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        async with async_session() as session:
            user = await session.scalar(select(UserInfo).where(UserInfo.tg_id == user_id))

        await rq.unic_data_user(
            tg_id=user_id,
            in_bot_name=user.in_bot_name if user else None,
            sex=user.sex if user else None,
            years=user.years if user else None,
            unic_your_id=unic_your_id,
            unic_wanted_id=unic_wanted_id,
            username=user.tg_username if user else None,
            first_name=user.first_name if user else None,
            last_name=user.last_name if user else None,
            number=user.number if user else None,
            status=user.status if user else None
        )

        if user_id == int(os.getenv('ADMIN_ID')):
            await message.answer(f"–ì–æ—Ç–æ–≤–æ –∞–¥–º–∏–Ω", reply_markup=kb.admin_menu)
        elif F.text == '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–∏–∫ üëª))':
            await message.answer(f"–í–∏–¥–∏—à—å, –Ω–µ —Å—Ç–æ–∏–ª–æ –±–æ—è—Ç—å—Å—è! –¢—ã –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!", reply_markup=kb.menu)
        elif F.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É':
            await message.answer(f"–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=kb.menu)
        await state.clear()


@router.callback_query(F.data.startswith("answer_you_"))
async def handle_you_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = callback.data.split("_")
    question_id, answer_index = int(data[2]), data[3]

    user_data = await state.get_data()
    your_answers = user_data.get("your_answers", [])
    your_answers.append(answer_index)
    await state.update_data(your_answers=your_answers)

    await callback.message.delete()
    await ask_question(callback.message, state, question_id + 1)
    await callback.answer()


@router.callback_query(F.data.startswith("answer_wanted_"))
async def handle_wanted_answer(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º callback.from_user.id
    data = callback.data.split("_")
    question_id, answer_index = int(data[2]), data[3]

    user_data = await state.get_data()
    wanted_answers = user_data.get("wanted_answers", [])
    wanted_answers.append(answer_index)
    await state.update_data(wanted_answers=wanted_answers)

    await callback.message.delete()
    await ask_wanted_question(callback.message, state, question_id + 1, callback.from_user.id)

    await callback.answer()


@router.message(F.text == '–ò—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ üòè')
async def find_partner(message: Message, state: FSMContext):
    async with async_session() as session:
        user = await session.scalar(select(UserInfo).where(UserInfo.tg_id == message.from_user.id))

        check_user_status = await session.scalar(select(UserInfo.status).where(UserInfo.tg_id == message.from_user.id))
        if check_user_status:
            matched_users = await find_matching_users(user)
            if not matched_users:
                await message.answer("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            await state.update_data(matched_users=matched_users)
            await show_partner_profile(message, matched_users, 0)
        else:
            await message.answer(
                '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∫–ª—é—á–∏—Ç–µ –µ–µ –≤ –º–µ–Ω—é "–ú–æ—è –∞–Ω–∫–µ—Ç–∞ ü´µ"',
                reply_markup=kb.admin_menu if message.from_user.id == int(os.getenv('ADMIN_ID')) else kb.menu
            )


@router.callback_query(F.data.startswith("prev_"))
async def prev_partner(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[1]) - 1
    user_data = await state.get_data()
    users = user_data.get("matched_users", [])

    if index < 0:
        index = len(users) - 1

    await show_partner_profile(callback.message, users, index)
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data.startswith("next_"))
async def next_partner(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[1]) + 1
    user_data = await state.get_data()
    users = user_data.get("matched_users", [])

    if index >= len(users):
        index = 0

    await show_partner_profile(callback.message, users, index)
    await callback.message.delete()
    await callback.answer()


@router.message(F.text == '–ù–∞–∑–∞–¥ üëà')
async def menu(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–ü–∞–Ω–µ–ª—å", reply_markup=kb.admin_menu)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb.menu)


@router.message(F.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞ ü´µ')
async def my_anket(message: Message):
    async with async_session() as session:
        user = await session.scalar(select(UserInfo).where(UserInfo.tg_id == message.from_user.id))
        if (not user) and (message.from_user.id != int(os.getenv('ADMIN_ID'))):
            await message.answer(
                "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üöÄ'.",
                reply_markup=kb.reg_keyboard
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile_photo = await message.bot.get_user_profile_photos(message.from_user.id, limit=1)

        if user.status == 1:
            status = '–£—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–∏—Å–∫–µ)'
        else:
            status = '–ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–∏—Å–∫–µ('

        profile_text = f"–ò–º—è: {user.in_bot_name if user and user.in_bot_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n" \
                       f"–ü–æ–ª: {user.sex if user and user.sex else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n" \
                       f"–í–æ–∑—Ä–∞—Å—Ç: {user.years if user and user.years else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n" \
                       f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã: {status}"

        await message.answer('–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:', reply_markup=kb.myanket_menu)
        if user_profile_photo.total_count > 0:
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            photo = user_profile_photo.photos[0][-1]  # –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await message.bot.download(photo.file_id)

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ BytesIO
            file_bytes = BytesIO(file.read())
            file_bytes.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
            await message.bot.send_photo(
                chat_id=message.chat.id,
                caption=profile_text,
                photo=BufferedInputFile(file_bytes.read(), filename="avatar.jpg")
            )
        else:
            # –ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(f"–ö–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏, –ª–∏–±–æ –æ–Ω–∞ —Å–∫—Ä—ã—Ç–∞(\n\n {profile_text}")


@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å üïê')
async def change_status(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã:",
        reply_markup=kb.status_keyboard()
    )


@router.callback_query(F.data.in_({"enable_profile", "disable_profile"}))
async def update_status(call: CallbackQuery):
    new_status = 1 if call.data == "enable_profile" else 0

    async with async_session() as session:
        user = await session.execute(select(UserInfo).where(UserInfo.tg_id == call.from_user.id))
        user = user.scalars().first()
        if user:
            user.status = new_status
            await session.commit()

    await call.message.delete()
    await call.answer("–°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω ‚úÖ")

    # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É


@router.message(F.text == '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üëë')
async def admin(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–¢—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –≤ –∞–¥–º–∏–Ω–∫—É", reply_markup=kb.admin)
    else:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è ", reply_markup=kb.menu)


@router.message(F.text == '–ö-–≤–æ user–æ–≤')
async def users_count(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        async with async_session() as session:
            result = await session.scalar(select(func.count()).select_from(UserInfo))
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result}', reply_markup=kb.admin)
    else:
        await message.answer('–ú–∞—è-—Ç–≤–∞—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å', reply_markup=kb.menu)
