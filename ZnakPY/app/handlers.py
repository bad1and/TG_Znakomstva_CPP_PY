import os
from io import BytesIO
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, BufferedInputFile, CallbackQuery

import app.database.requests as rq
import app.keyboards as kb
from app.models import RegistrationState
from app.questions import questions, questions_wanted

router = Router()


# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@router.message(CommandStart())
async def cmd_start(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω!", reply_markup=kb.admin_menu)
        return

    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer(
            "–í—ã —É –Ω–∞—Å –ø–µ—Ä–≤—ã–π —Ä–∞–∑! –ù–∞–∂–º–∏—Ç–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üöÄ' –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç.",
            reply_markup=kb.reg_keyboard
        )
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb.menu)


# ---------- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ----------
@router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üöÄ')
async def request_contact(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", reply_markup=kb.reg_keyboard)


@router.message(F.contact)
async def handle_contact(message: Message):
    contact = message.contact
    await rq.add_user(
        tg_id=message.from_user.id,
        username=message.from_user.username or "",
        first_name=contact.first_name or None,
        last_name=contact.last_name or None,
        number=contact.phone_number
    )
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.",
        reply_markup=kb.opros_keyboard
    )


# ---------- –ê–Ω–∫–µ—Ç–∞ ----------
@router.message(F.text == '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å ü§ô')
async def start_survey(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=None)
    await state.set_state(RegistrationState.waiting_for_name)


@router.message(RegistrationState.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª", reply_markup=kb.sex)
    await state.set_state(RegistrationState.waiting_for_sex)


@router.message(RegistrationState.waiting_for_sex)
async def process_sex(message: Message, state: FSMContext):
    sex_map = {
        "–ú—É–∂—Å–∫–æ–π üôã‚Äç‚ôÇÔ∏è": "man",
        "–ñ–µ–Ω—Å–∫–∏–π üôã‚Äç‚ôÄÔ∏è": "woman"
    }

    if message.text not in sex_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ")
        return

    await state.update_data(sex=sex_map[message.text])
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=None)
    await state.set_state(RegistrationState.waiting_for_age)


@router.message(RegistrationState.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if not 16 <= age <= 100:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (16-100)")
        return

    user_data = await state.get_data()
    await rq.update_profile(
        tg_id=message.from_user.id,
        in_bot_name=user_data.get('name'),
        sex=user_data.get('sex'),
        years=age
    )

    await message.answer(
        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –æ —Ç–µ–±–µ –∏ —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö!",
        reply_markup=kb.start_opros
    )
    await state.clear()


# ---------- –û–ø—Ä–æ—Å ----------
@router.message(F.text.in_(['–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–∏–∫ üëª', '–ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å üîÑ']))
async def start_questions(message: Message, state: FSMContext):
    await state.update_data(your_answers=[], wanted_answers=[])
    await ask_question(message, state, 1)


async def ask_question(message: Message, state: FSMContext, question_id: int):
    if question_id in questions:
        await message.answer(
            questions[question_id]["question"],
            reply_markup=kb.get_question_keyboard(question_id)
        )
    else:
        await ask_wanted_question(message, state, 1,message.from_user.id)

async def ask_wanted_question(message: Message, state: FSMContext, question_id: int, user_id: int):
    if question_id in questions_wanted:
        await message.answer(
            questions_wanted[question_id]["question"],
            reply_markup=kb.get_wanted_question_keyboard(question_id)
        )
    else:
        data = await state.get_data()
        await rq.update_questionnaire(
            tg_id=user_id,
            unic_your_id=";".join(data.get("your_answers", [])),
            unic_wanted_id=";".join(data.get("wanted_answers", []))
        )

        if user_id == int(os.getenv('ADMIN_ID')):
            await message.answer("–ì–æ—Ç–æ–≤–æ –∞–¥–º–∏–Ω", reply_markup=kb.admin_menu)
        else:
            await message.answer(
                "–í–∏–¥–∏—à—å, –Ω–µ —Å—Ç–æ–∏–ª–æ –±–æ—è—Ç—å—Å—è! –¢—ã –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!",
                reply_markup=kb.menu
            )
        await state.clear()


@router.callback_query(F.data.startswith("answer_you_"))
async def handle_you_answer(callback: CallbackQuery, state: FSMContext):
    _, _, question_id, answer_index = callback.data.split("_")
    data = await state.get_data()
    answers = data.get("your_answers", [])
    answers.append(answer_index)
    await state.update_data(your_answers=answers)
    await callback.message.delete()
    await ask_question(callback.message, state, int(question_id) + 1)
    await callback.answer()


@router.callback_query(F.data.startswith("answer_wanted_"))
async def handle_wanted_answer(callback: CallbackQuery, state: FSMContext):
    _, _, question_id, answer_index = callback.data.split("_")
    data = await state.get_data()
    answers = data.get("wanted_answers", [])
    answers.append(answer_index)
    await state.update_data(wanted_answers=answers)
    await callback.message.delete()
    await ask_wanted_question(callback.message, state, int(question_id) + 1, callback.from_user.id)
    await callback.answer()


# ---------- –ü—Ä–æ—Ñ–∏–ª—å ----------
@router.message(F.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞ ü´µ')
async def show_profile(message: Message):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer(
            "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!",
            reply_markup=kb.reg_keyboard
        )
        return

    status = "‚úÖ –£—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø–æ–∏—Å–∫–µ" if user['status'] else "‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç"
    profile_text = (
        f"–ò–º—è: {user.get('in_bot_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ü–æ–ª: {user.get('sex', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.get('years', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
    photos = await message.bot.get_user_profile_photos(message.from_user.id, limit=1)
    if photos.total_count > 0:
        photo = photos.photos[0][-1]
        file = await message.bot.download(photo.file_id)
        file_bytes = BytesIO(file.read())
        await message.answer_photo(
            BufferedInputFile(file_bytes.read(), filename="profile.jpg"),
            caption=profile_text,
            reply_markup=kb.myanket_menu
        )
    else:
        await message.answer(profile_text, reply_markup=kb.myanket_menu)


@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å üïê')
async def change_status(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã:",
        reply_markup=kb.status_keyboard()
    )

@router.callback_query(F.data.in_(["enable_profile", "disable_profile"]))
async def update_status(callback: CallbackQuery):
    new_status = 1 if callback.data == "enable_profile" else 0
    success = await rq.update_user_status(callback.from_user.id, new_status)

    if success:
        await callback.message.delete()
        await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω ‚úÖ")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")




@router.message(F.text == '–ò—Å–∫–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ üòè')
async def find_partner(message: Message):
        await message.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", reply_markup=kb.menu)




# ---------- –ê–¥–º–∏–Ω–∫–∞ ----------
@router.message(F.text == '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üëë')
async def admin_panel(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=kb.admin)
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", reply_markup=kb.menu)


@router.message(F.text == '–ö-–≤–æ user–æ–≤')
async def users_count(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        count = await rq.get_users_count()
        await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}", reply_markup=kb.admin)
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", reply_markup=kb.menu)


# ---------- –ù–∞–≤–∏–≥–∞—Ü–∏—è ----------
@router.message(F.text == '–ù–∞–∑–∞–¥ üëà')
async def back_to_menu(message: Message):
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.admin_menu)
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.menu)